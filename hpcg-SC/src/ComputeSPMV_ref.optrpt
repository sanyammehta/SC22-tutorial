Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -I./src -I./src/CCE -I/global/opt/intel/compilers_and_libraries_2019.3.199/linux/mpi/intel64/include -qopenmp -qopt-report5 -c -o src/ComputeSPMV_ref.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: ComputeSPMV_ref(const SparseMatrix &, Vector &, Vector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ComputeSPMV_ref(const SparseMatrix &, Vector &, Vector &)) [1/1=100.0%] src/ComputeSPMV_ref.cpp(47,70)
  -> EXTERN: (49,3) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> EXTERN: (50,3) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> EXTERN: (53,5) ExchangeHalo(const SparseMatrix &, Vector &)


    Report from: OpenMP optimizations [openmp]

src/ComputeSPMV_ref.cpp(59:3-59:3):OMP:_Z15ComputeSPMV_refRK19SparseMatrix_STRUCTR13Vector_STRUCTS3_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/ComputeSPMV_ref.cpp(61,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/ComputeSPMV_ref.cpp(69,5)
      remark #15319: loop was not vectorized: novector directive used
      remark #25439: unrolled with remainder by 3  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25457: Number of partial sums replaced: 1
   LOOP END

   LOOP BEGIN at src/ComputeSPMV_ref.cpp(69,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/ComputeSPMV_ref.cpp(47,70):remark #34051: REGISTER ALLOCATION : [_Z15ComputeSPMV_refRK19SparseMatrix_STRUCTR13Vector_STRUCTS3_] src/ComputeSPMV_ref.cpp:47

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     171
            Global    :      40
            Local     :     131
        Regenerable   :      64
        Spilled       :       1
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       5 [9.90e-01 ~ 0.2%]
            Writes    :       9 [2.48e+01 ~ 4.4%]
        Spills        :      56 bytes*
            Reads     :      13 [6.83e+00 ~ 1.2%]
            Writes    :      13 [1.28e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
